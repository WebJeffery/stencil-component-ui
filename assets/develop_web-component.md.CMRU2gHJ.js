import{_ as s,c as i,o as a,ab as e}from"./chunks/framework.DIU08dKJ.js";const t="/stencil-component-ui/assets/button.DOQ7_769.png",n="/stencil-component-ui/assets/web-use.ffqaq_5i.png",y=JSON.parse('{"title":"Web Component 组件库有什么优势","description":"","frontmatter":{},"headers":[],"relativePath":"develop/web-component.md","filePath":"develop/web-component.md","lastUpdated":1721052724000}'),l={name:"develop/web-component.md"},p=e('<h1 id="web-component-组件库有什么优势" tabindex="-1">Web Component 组件库有什么优势 <a class="header-anchor" href="#web-component-组件库有什么优势" aria-label="Permalink to &quot;Web Component 组件库有什么优势&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>前端目前比较主流的框架有 react，vuejs，angular 等。 我们通常去搭建组件库的时候都是基于某一种框架去搭建，比如 <code>ant-design</code> 是基于 <code>react</code> 搭建的UI组件库，而 <code>element-plus</code> 则是基于 <code>vuejs</code> 搭建的组件库。</p><p>可能你有这种体会，在开发 vue 项目需要用到一个库插件，去搜索一遍发现只有 react 开发的功能比较符合自己的需求，这时候就比较纠结了。虽然目前社区有相关工具 像 <a href="https://github.com/devilwjp/veaury" target="_blank" rel="noreferrer">veaury</a>，提供框架之间的转化服务，比如 vuejs 组件转化为 react 组件。但是毕竟是不同的框架，有不同的标准。如果有问题，就不知道从何入手调试解决问题了。</p><p>并且框架升级之后，比如从 2.x 升级到 3.x，总是带来一定的破坏性，升级和更改框架的成本很大，项目业务稳定后几乎是不可能升级。</p><p>所以在寻找有没有哪一种 UI 库可以跨越框架限制使用在项目中，在了解 web-component 技术后，使用 <a href="https://stenciljs.com/" target="_blank" rel="noreferrer">Stencil.js</a> 框架根据 <code>Element-plus</code> 设计造轮子搭建了一个 <a href="https://webjeffery.github.io/stencil-component-ui/components/button.html" target="_blank" rel="noreferrer">stencil-component-ui</a> 示例组件库，发现这是一种不错的技术和方向。</p><p><img src="'+t+`" alt=""></p><p>没错，上面看到的是 web-component 开发的 button 组件，感觉和 element-plus button 按钮长的一样，不过开发起来更简单代码量更少，而且能用在 <em>React/Vue/Angular</em> 不同框架项目上，甚至能用在 <em>纯JS和服务端渲染</em> 静态网站</p><p>注意：只是简单示例项目，功能不完善</p><h2 id="什么是web-component" tabindex="-1">什么是web-component <a class="header-anchor" href="#什么是web-component" aria-label="Permalink to &quot;什么是web-component&quot;">​</a></h2><p>&quot;Web Components&quot; 是一组现代的 Web 开发标准和技术，它的一系列 HTML 和 DOM 的特性加入 w3c 标准，允许开发者创建封装好的、可复用的自定义元素。这些自定义元素可以在 HTML 中用作一等公民，与原生的 HTML 元素一样的使用</p><p>由于 Web Components 是由w3c组织去推动的，因此它很有可能在不久的将来成为浏览器的一个标配。</p><p>在我了解到京东 <a href="https://micro-zoe.github.io/micro-app/" target="_blank" rel="noreferrer">micro-app</a> 微前端框架、<a href="https://taro-ui.taro.zone/#/" target="_blank" rel="noreferrer">taro-ui</a> UI 库，语雀的富文本编辑器都使用到 web components 技术</p><h2 id="web-component-特性" tabindex="-1">web-component 特性 <a class="header-anchor" href="#web-component-特性" aria-label="Permalink to &quot;web-component 特性&quot;">​</a></h2><p>Web Components 由 3 个核心部分组成</p><h3 id="custom-elements" tabindex="-1">Custom Elements <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;Custom Elements&quot;">​</a></h3><p>这项技术允许开发者定义自己的 HTML 元素。可以创建新的 HTML 标签，并定义它们的行为。一旦一个 Custom Element 被定义和注册，可以在页面上像使用其他 HTML 元素一样使用它。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="shadow-dom" tabindex="-1">Shadow DOM <a class="header-anchor" href="#shadow-dom" aria-label="Permalink to &quot;Shadow DOM&quot;">​</a></h3><p>Shadow DOM 允许开发者封装一个 DOM 子树和样式，让它们与主文档的 DOM 保持独立。这意味着在组件内部定义的样式不会影响到外部的页面，反之亦然。</p><p>例如，在 Shadow DOM 中的样式只影响 Shadow DOM：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #shadow-root</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;This is in shadow DOM and styled red.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="html-templates" tabindex="-1">HTML Templates <a class="header-anchor" href="#html-templates" aria-label="Permalink to &quot;HTML Templates&quot;">​</a></h3><p>HTML Templates 通过 <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元素，允许定义一个可以在 JavaScript 中使用的 HTML 片段。它在不被引用的情况下不会被渲染，且不会影响页面的加载。 例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My Template&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>Web Components 提供了一种创建可重用、封装和模块化的自定义 HTML 元素的方式。由于它们是基于 Web 平台的标准技术构建的，这意味着构建的 Web Components 可以在任何使用了现代 Web 技术的应用中使用，无论这些应用是使用哪种框架（如 React、Angular、Vue 等）或者不使用框架构建的。</p><p>在 <a href="https://caniuse.com/" target="_blank" rel="noreferrer">caniuse</a> 查看它的兼容性，不兼容 IE11，Vue3 都不兼容 IE11了，总体还不错</p><p><img src="`+n+`" alt=""></p><p>使用 Web Component 可以做的事情</p><p>1、<em>开发 UI 组件库</em>：</p><ul><li>开发一个通用的、可在多个项目中重用的 UI 组件库。</li><li>由于 Web Components 本质上是框架无关的，它们可以在不同的前端框架中使用，增强其可移植性。</li></ul><p>2、<em>第三方组件</em>：</p><ul><li>创建可以轻松集成到其他应用的第三方组件（例如，社交分享按钮、聊天窗口、支付窗口等）。</li><li>避免样式和脚本干扰，提供更加干净、无冲突的集成。</li></ul><p>3、<em>微前端</em>：</p><ul><li>使用 Web Components 构建微前端，允许将大型应用拆分成独立部署的较小应用，这些较小的应用可以由不同的团队独立开发和部署。</li><li>由于 Web Components 的封装性，不同的微前端应用不会互相干扰。</li></ul><p>4、<em>嵌入内容和小部件</em>：</p><ul><li>创建可嵌入到其他应用中的内容和小部件，例如：评论系统、天气小部件等。</li></ul><p>5、<em>多平台应用</em>：</p><ul><li>构建能在多个平台（桌面、移动、Web）上运行的应用。使用 Web Components 可以保证在不同平台之间重用 UI 组件。</li></ul><p>所以 Web Components 天然的和我们开发的组件思想相吻合，支持原子性、可复用、可重组，并且移植性强，支持跨平台跨框架</p><h2 id="入门示例" tabindex="-1">入门示例 <a class="header-anchor" href="#入门示例" aria-label="Permalink to &quot;入门示例&quot;">​</a></h2><p>接下来介绍 如何创建一个简单 Web Components 组件</p><p><em>1、定义组件</em></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 使用 customElements.define() 方法用来注册一个 custom element</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 参数如下：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - 元素名称，符合 DOMString 规范，名称不能是单个单词，且必须用短横线隔开</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - 元素行为，必须是一个类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * - 继承元素，可选配置，一个包含 extends 属性的配置对象，指定创建的元素继承自哪个内置元素，可以继承任何内置元素。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> shadow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attachShadow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;span&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text.textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hi Custom Element!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text.style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;color: red&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        shadow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">customElements.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-custom-element&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyCustomElement)</span></span></code></pre></div><p><em>2、使用组件</em></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;my-custom-element&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-custom-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-custom-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面的代码实现 <code>MyCustomElement</code> 类来定义组件，通过 <code>customElements.define</code> 方法定义注册组件，导入组件后，跟使用普通 HTML 标签一样直接使用自定义组件 <code>&lt;my-custom-element&gt;&lt;/my-custom-element&gt;</code></p><h2 id="web-component-缺点" tabindex="-1">Web Component 缺点 <a class="header-anchor" href="#web-component-缺点" aria-label="Permalink to &quot;Web Component 缺点&quot;">​</a></h2><p>从上面的开发示例来看，虽然开发一个组件看起来很简单，但是在我们使用习惯框架之后，发现使用它开发似乎要回到 jquery 时代</p><ul><li>没有响应式</li><li>没有虚拟 dom</li><li>没有简洁的api</li><li>没有脚手架</li><li>HTMLElement 不支持SSR</li><li>……</li></ul><p>所以开发一个复杂的组件库，这些远远不够，好在现在也有一些非常好用的开源库</p><h2 id="web-component-开源库" tabindex="-1">Web Component 开源库 <a class="header-anchor" href="#web-component-开源库" aria-label="Permalink to &quot;Web Component 开源库&quot;">​</a></h2><h3 id="stencil" tabindex="-1">Stencil <a class="header-anchor" href="#stencil" aria-label="Permalink to &quot;Stencil&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/ionic-team/stencil" target="_blank" rel="noreferrer">Stencil</a></p><p>Stencil：2019 年6月正式发布第一版，官方定义是一个Web Component编译器，lonic 团队开发，把现在流行的虚拟 dom、异步渲染、响应式、JSX 等概念都做了支持，并且自己只是一个构建时工具。用 Stencil 开发的框架可以独立运行、也可以运行在主流框架。</p><p>它的设计思想和 React 框架很相似，拥有虚拟 dom、异步渲染、响应式、JSX，也有 Vue 框架 <code>watch</code> 监听数据的影子，总的来说集成了很多 Angular、React、Vue 框架的诸多优点，这也正是选择它开发组件库的原因。</p><h3 id="lit" tabindex="-1">Lit <a class="header-anchor" href="#lit" aria-label="Permalink to &quot;Lit&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/lit/lit" target="_blank" rel="noreferrer">Lit</a></p><p>Lit 是由 Google 制作的一个简单的库，用于创建 Web Components。Lit 提供了一个基础类（LitElement）来帮助开发者创建 Web Components，并使用一个叫做 lit-html 的模板引擎来定义组件的 HTML 结构。</p><p>Lit-html 基于 ES 的模板自变量和 template 标签，用注释节点去动态填充，没 有 JSX 转换虚拟 dom的过程，把大部分模板创建渲染的事都交给浏览器去做，提供了轻量的 api 让我们可以在JS中写 HTML-Templates。 Lit- Element的 Reactive properties、Scoped styles 等功能也很实用。</p><h3 id="fast" tabindex="-1">Fast <a class="header-anchor" href="#fast" aria-label="Permalink to &quot;Fast&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/microsoft/fast" target="_blank" rel="noreferrer">Fast</a></p><p>FAST 微软2020 年发布的标准化解决方案，可以用来创建组件和设计系统。组件核心是基于 Web Components 做到框架无关，帮助开发者快速构建高性能的 Web 用户界面。</p><h3 id="vaadin-components" tabindex="-1">Vaadin Components <a class="header-anchor" href="#vaadin-components" aria-label="Permalink to &quot;Vaadin Components&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/vaadin/web-components" target="_blank" rel="noreferrer">Vaadin Components</a></p><p>Vaadin Components 是一套用于构建 Web 应用的高质量的 Polymer（一种 Google 提出的创建 Web Components 的库）元素集。</p><h3 id="material-web-components" tabindex="-1">Material Web Components <a class="header-anchor" href="#material-web-components" aria-label="Permalink to &quot;Material Web Components&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/material-components/material-web" target="_blank" rel="noreferrer">Material Web Components</a></p><p>Material Web Components 提供了一套实现了 Google 的 Material Design 设计理念的 Web Components。</p><h3 id="shoelace" tabindex="-1">Shoelace <a class="header-anchor" href="#shoelace" aria-label="Permalink to &quot;Shoelace&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/shoelace-style/shoelace" target="_blank" rel="noreferrer">Shoelace</a></p><p>Shoelace 提供了一套完整的、用原生 Web Components 制作的、可自定义的 UI 组件。</p><h3 id="open-wc" tabindex="-1">Open-WC <a class="header-anchor" href="#open-wc" aria-label="Permalink to &quot;Open-WC&quot;">​</a></h3><p>GitHub 仓库: <a href="https://github.com/open-wc/open-wc" target="_blank" rel="noreferrer">Open-WC</a></p><p>Open-WC 提供了一套建议和工具集，用于帮助开发者创建 Web Components 和 Web 应用。</p>`,76),h=[p];function k(o,r,E,d,c,g){return a(),i("div",null,h)}const u=s(l,[["render",k]]);export{y as __pageData,u as default};
